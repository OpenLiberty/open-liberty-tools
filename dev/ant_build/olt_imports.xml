<!--
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
-->

<project name="olt_imports">

    <dirname property="olt_imports.basedir" file="${ant.file.olt_imports}" />

    <import file="${olt_imports.basedir}/public_imports/internal_imports/buildtasks.xml" />
    <import file="${olt_imports.basedir}/public_imports/updatesite_imports.xml"/>
	<import file="olt_suppliers_updatesite.xml"/>

   <target name="setOLTUpdateSiteProperties">
  
         <echo>Open OLT setOLTUpdateSiteProperties call</echo>
   	
         <condition property="java.executable" value="java" else="java.exe">
           <not>
             <os family="windows" />
           </not>
         </condition>

         <property name="local.workspace" location="${olt_imports.basedir}/.."/>
         <property name="target.jvm" location="${java.home}/bin/${java.executable}" />
         <property name="equinox.launcher" value="org.eclipse.equinox.app_1.3.100.v20120522-1841.jar" /> 
         <property name="delegate.build.dir" location = "${local.workspace}"/>

         <property name="nativeDirectory" value="${local.workspace}/tools.image/update" />
         <property name="sourceDir" value="${nativeDirectory}/staging" />
         <property name="tempDir" value="${sourceDir}/temp" />
         <property name="updateSiteDir" value="${sourceDir}/update-site" />
         <property name="updateSiteDirFull" value="${sourceDir}/update-sitefull" />
         <property name="version" value="${level_tag}" />
         <property name="fileNameVersion" value="${level_tag}" />
         
         <echo>SourceDir is ${sourceDir}</echo>
         
         <loadresource property="newVersion">
             <propertyresource name="fileNameVersion" />
             <filterchain>
                 <tokenfilter>
                     <filetokenizer />
                     <replacestring from=" " to="_" />
                 </tokenfilter>
             </filterchain>
         </loadresource>
         
         <var name="fileNameVersion" unset="true" />
         <property name="fileNameVersion" value="${newVersion}" />
         <property name="qualifier" value="${buildLabel}"/>
         <property name="updatesite-name" value="openlibertytools-${fileNameVersion}.v${qualifier}" />
         <property name="metadata-updatesite-name" value="openlibertytools-metadata-${fileNameVersion}.v${qualifier}" />         
         <echo message="Target jvm location at ${target.jvm}" />
             
         <property name="gen.updatesite.file" location="${olt_imports.basedir}/resources/olt_updatesite-properties/generateP2Metadata.xml" />
         <echo message="Script location at ${gen.updatesite.file}" />
         
         <property name="target.updatesite.repository" location="${updateSiteDir}/repository" />
   	
         <mkdir dir="${target.updatesite.repository}"/>
         <echo message="Source location at ${updateSiteDir}" />
         <echo message="Updatesite location at ${target.updatesite.repository}" />
     
         <property name="olt.product.toplevelfeatures.list" 
             location="olt_product_updatesite_toplevel_features.properties" />
         <property name="olt.product.features.list" 
             location="olt_product_updatesite_features.properties" />
 	
	</target>
	
	<target name="generateOLTUpdateSite" depends="setOLTUpdateSiteProperties">
		
		<echo>Open OLT generate updateSite call</echo>

		<!-- Step 1 -->
		<!-- Create site.xml with top level feature(s) -->
		<generateUpdateSite 
			tempDir="${tempDir}" 
			sourceDir="${sourceDir}" 
			outputDir="${updateSiteDir}"
			addIncludedFeatures="false">
		  				
		<!-- Add Main feature here -->
			<category name="was4d"  
				label="Open Liberty Tools for Eclipse" 
				description="Open Liberty Tools for Eclipse">
				
				<!-- Features list file -->
				<featuresFile id="Open OLT product updatesite toplevel features" 
					file="${olt.product.toplevelfeatures.list}" />
				
		  	</category>
		</generateUpdateSite>
		  	
		<!-- Step 2 -->
		<!-- Include features -->
		<generateUpdateSite 
			tempDir="${tempDir}" 
			sourceDir="${sourceDir}" 
			outputDir="${updateSiteDirFull}"
			addIncludedFeatures="true">
			
			<!-- Features list file -->
			<featuresFile id="Open OLT product updatesite features" 
								file="${olt.product.features.list}" />
			
			
	  	</generateUpdateSite>
		
	  	<!-- Step 3 -->
	  	<!-- Generate P2 metadata -->
	  	<copy todir="${updateSiteDir}/features" overwrite="true" verbose="true">
	  		<fileset dir="${updateSiteDirFull}/features">
	  			<include name="**/*.jar"/>
	  		</fileset>
	  	</copy>  
		  			
	  	<copy todir="${updateSiteDir}/plugins" overwrite="true" verbose="true">
	  		<fileset dir="${updateSiteDirFull}/plugins">
	  			<include name="**/*.jar"/>
	  		</fileset>
	  	</copy>

		<ant antfile="${delegate.build.dir}/ant_build/public_imports/updatesite_imports.xml" 
							 target="pde-setup"
							 inheritall="true"
							 inheritrefs="true"/>
		
		<ant antfile="${delegate.build.dir}/ant_build/public_imports/updatesite_imports.xml" 
									 target="generateP2Metadata"
									 inheritall="true"
									 inheritrefs="true"/>
	  	
	  	<!-- Step 4 -->
		<!-- Copy site.xml into staging directory for WTP installation compatibility-->
		<copy file="${updateSiteDir}/site.xml" todir="${target.updatesite.repository}" overwrite="true" verbose="true" />
		  

        <property name="artifact.location" value="${nativeDirectory}/${updatesite-name}.zip"/>

	  	<!-- Step 5 -->
	    <!-- Create final zip -->
		<zip destfile="${artifact.location}" basedir="${target.updatesite.repository}"/>

        <copy file="${artifact.location}" todir="${artifacts.dir}"/>

        <echo>***** Build artifact available at ${artifacts.dir}/${updatesite-name}.zip</echo>
	
	</target>
	
   <target name="generateOLTSuppliersUpdateSite" depends="setOLTUpdateSiteProperties">
                
            <echo>Open OLT generateOLTSuppliersUpdateSite call</echo>
            <antcall target="generateSuppliersUpdateSite"/>
   	
            <!-- Copy com.ibm.ws.kernel.feature.resolver_*.jar into ${local.workspace}/tools.image/update/plugins to have them signed -->
            <echo>Copying ${sourceDir}/plugins/com.ibm.ws.kernel.feature.resolver_*.jar to ${local.workspace}/tools.image/update/plugins </echo>
            <copy todir="${local.workspace}/tools.image/update/plugins" overwrite="true" verbose="true">
                <fileset dir="${sourceDir}/plugins">
                    <include name="com.ibm.ws.kernel.feature.resolver_*.jar"/>
                </fileset>
            </copy>
   
    </target>
	
	<target name="generateOLTSuppliersUpdateSiteRestore" depends="setOLTUpdateSiteProperties">
		        
	        <echo>Open OLT generateOLTSuppliersUpdateSiteRestore call</echo>
		
    	        <!-- Copy build (signed if disable.run.signjar=false) result content -->
		    <mkdir dir="${local.workspace}/tools.image/update/features"/>
		    <mkdir dir="${sourceDir}/features"/>
		
		    <echo>local.workspaceDIR: 
		    	${local.workspace}/tools.image/update/features folder directory contents:
	        </echo>
	        <exec executable="ls" failonerror="false" dir="${local.workspace}/tools.image/update/features">
	            <arg value="-a" />
	        </exec>
		
        <echo> sourceDIR: 
        	${sourceDir}/features folder directory contents:
        </echo>
        <exec executable="ls" failonerror="false" dir="${sourceDir}/features">
            <arg value="-a" />
        </exec>
		
		    	
    	        <copy todir="${sourceDir}/features" overwrite="true" verbose="true">
    	            <fileset dir="${local.workspace}/tools.image/update/features">
    	                <include name="**/*.jar"/>
    	            </fileset>
    	        </copy>
 
        <echo> sourceDIR: 
        	${local.workspace}/tools.image/update/plugins folder directory contents:
        </echo>
        <exec executable="ls" failonerror="false" dir="${local.workspace}/tools.image/update/plugins">
            <arg value="-a" />
        </exec>
        	
            <echo> sourceDIR: 
            	${sourceDir}/plugins folder directory contents:
            </echo>
            <exec executable="ls" failonerror="false" dir="${sourceDir}/plugins">
                <arg value="-a" />
            </exec>
        	
    	        <copy todir="${sourceDir}/plugins" overwrite="true" verbose="true">
    	            <fileset dir="${local.workspace}/tools.image/update/plugins">
    	                <include name="**/*.jar"/>
    	            </fileset>
    	        </copy>
		
		<echo> sourceDIR: 
			${sourceDir}/suppliers/update-site/plugins folder directory contents:
		            </echo>
		            <exec executable="ls" failonerror="false" dir="${sourceDir}/suppliers/update-site/plugins">
		                <arg value="-a" />
		            </exec>
		
		    <!-- copy com.ibm.ws.kernel.feature.resolver_*.jar into suppliers dir  -->
		    <move todir="${sourceDir}/suppliers/update-site/plugins" overwrite="true" verbose="true">
                <fileset dir="${local.workspace}/tools.image/update/plugins">
                    <include name="com.ibm.ws.kernel.feature.resolver_*.jar"/>
                </fileset>
            </move>                    		
            	
	      <echo> afterMove: 
	            ${sourceDir}/suppliers/update-site/plugins folder directory contents:
	                    </echo>
	                    <exec executable="ls" failonerror="false" dir="${sourceDir}/suppliers/update-site/plugins">
	                        <arg value="-a" />
	                    </exec>
	        
	</target>
</project>
